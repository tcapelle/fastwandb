# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/01_datasets.ipynb (unless otherwise specified).

__all__ = ['PROJECT_NAME', 'JOB_TYPE', 'ENTITY', 'upload_folder', 'ImageTable', 'label_image_name', 'label_image_image',
           'ImageDataset']

# Cell
from .imports import *
from .image import *

PROJECT_NAME = "fastwandb"
JOB_TYPE     = "test_nb01"
ENTITY       = "tcapelle"

# Cell
def upload_folder(path: File, name='dataset', metadata={}, description='dataset'):
    "Upload all files in path"
    path = Path(path)
    artifact_dataset = wandb.Artifact(name=name,
                                      type='dataset',
                                      metadata=metadata,
                                      description=description)

    #upload folders and files insidet `path`
    for f in path.iterdir():
        if f.is_dir():
            artifact_dataset.add_dir(f, name=f.name)
        else:
            artifact_dataset.add_file(f)
    return wandb.run.use_artifact(artifact_dataset)

# Cell
class ImageTable(wandb.Table):
    """A basic Table containing images.
    Args:
    - image_paths List[Path]: A list of paths referencing images.
    - label_func  Callable: A function to label images.
    """

    @classmethod
    def from_files(cls, image_paths, label_func):
        image_table = cls(columns=['img', 'label'])
        for img_path in image_paths:
            image_table.add_data(wandb.Image(str(img_path)), label_func(img_path))
        return image_table

    @classmethod
    def from_folder(cls, folder_path, label_func):
        files = Path(folder_path).ls()
        # we could put `get_image_files` here
        return cls.from_files(files, label_func)

    def log_to_workspace(self, name='table'):
        wandb.log({name: self})

    @delegates(wandb.Artifact, but='name, type')
    def log_to_artifact(self, name, type, tag=None, **kwargs):
        artifact = wandb.Artifact(name=name, type=type, **kwargs)
        artifact["data"] = self

        if tag is not None:
            wandb.log_artifact(artifact, aliases=[tag, "latest"])
        else:
            wandb.log_artifact(artifact)

        # log Table to the workspace for easier visualization
        self.log_to_workspace()

# Cell
def label_image_name(path):
    "get name from image fname"
    return path.name.split('.')[0]

def label_image_image(path):
    "Autoencoder task"
    return wandb.Image(str(path))

# Cell
def _wandb_image2pil_image(wandb_image):
    if type(wandb_image) == wandb.Image:
        return wandb_image.image
    else:
        return wandb_image

# Cell
class ImageDataset:

    def __init__(self, items):
        self.items = items

    @classmethod
    def from_table(cls, table):
        return cls(table.data)

    @classmethod
    def from_artifact(cls, artifact_dataset):
        table = artifact_dataset.get("data")
        return cls.from_table(table)

    def __getitem__(self, idx):
        row = self.items[idx]
        return tuple(_wandb_image2pil_image(x) for x in row)

    def __len__(self):
        return len(self.items)